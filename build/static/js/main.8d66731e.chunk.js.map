{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"0NAoBeA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCF3BK,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKJ,UAAU,SACZI,I,gBCsBQ,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAVR,cAWRC,EAAc,CAClBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KArBR,aAqBsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UA1BF,aA0BE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC6CrCK,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAyISC,EApIH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,0BAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAkBrBC,qBAAU,WACRC,IAEGxB,MAAK,SAAAyB,GACJT,EAASS,QAEZ,IAmBH,IAqBMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAA1C,GAAI,OAAuB,IAAnBA,EAAKG,aAoC9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAAS4B,IACvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAAC3C,EAAM4C,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL5C,KAAMA,EACNC,iBAAkB,kBAjCD,SAAAY,GACzB,IAAMb,EAAO8B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAElC,KAAOA,KAChCmC,EAAW,2BAAQhD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACUS,GAAajC,MAAK,SAAAkC,GACxBlB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOiD,SAEpDC,OAAM,SAAAC,GACLd,EAAgB,SAAD,OACJrC,EAAKK,QADD,sCAGf+C,YAAW,WACTf,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAElC,KAAOA,SAkBRwC,CAAmBrD,EAAKa,WAItD,0BAAMyC,SA7EM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBpD,QAAS2B,EACTlB,MAAM,IAAI4C,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,IAG7BtB,EACUkB,GACP1C,MAAK,SAAAkC,GACJlB,EAASD,EAAMZ,OAAO+B,IACtBhB,EAAW,SAkEX,2BACE6B,MAAO9B,EACP+B,SAhEiB,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB7B,EAAWsB,EAAMW,OAAOJ,UAgEpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MCpCNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8d66731e.chunk.js","sourcesContent":["import React from 'react'\n\n// const Note = ({ note }) => {\n//   return (\n//     <li>{note.content}</li>\n//   )\n// }\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\n// const getAll = () => {\n//   const request = axios.get(baseUrl)\n//   return request.then(response => {\n//     return response.data\n//   })\n// }\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","// import React from 'react'\n// import Note from './components/Note'\n\n// const App = ({ notes }) => {\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <ul>\n//         {notes.map((note, i) =>\n//           <Note key={i} note={note} />\n//         )}\n//       </ul>\n//     </div>\n//   )\n// }\n\n// export default App \n\n// import React, { useState } from 'react'\n// import Note from './components/Note'\n\n// const App = (props) => {\n//   const [notes, setNotes] = useState(props.notes)\n//   const [newNote, setNewNote] = useState(\n//     'a new note...'\n//   ) \n\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() < 0.5,\n//       id: notes.length + 1,\n//     }\n\n//     setNotes(notes.concat(noteObject))\n//     setNewNote('')\n//   }\n  \n//   const handleNoteChange = (event) => {\n//     console.log(event.target.value)\n//     setNewNote(event.target.value)\n//   }\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <ul>\n//         {notes.map(note =>\n//           <Note key={note.id} note={note} />\n//         )}\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input\n//           value={newNote}\n//           onChange={handleNoteChange}\n//         />\n//         <button type=\"submit\">save</button>\n//       </form>   \n//     </div>\n//   )\n// }\n\n// export default App \n\nimport React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport axios from 'axios'\nimport noteService from './services/notes'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  // const hook = () => {\n  //   console.log('effect')\n  //   axios\n  //     .get('http://localhost:3001/notes')\n  //     .then(response => {\n  //       console.log('promise fulfilled')\n  //       setNotes(response.data)\n  //     })\n  // }\n\n  // useEffect(hook, [])\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  // const addNote = (event) => {\n  //   event.preventDefault()\n  //   const noteObject = {\n  //     content: newNote,\n  //     date: new Date().toISOString(),\n  //     important: Math.random() < 0.5,\n  //     id: notes.length + 1,\n  //   }\n\n  //   axios\n  //     .post('http://localhost:3001/notes', noteObject)\n  //     .then(response => {\n  //       setNotes(notes.concat(response.data))\n  //       setNewNote('')\n  //     })\n  // }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  // const toggleImportanceOf = (id) => {\n  //   console.log('importance of ${id} needs to be toggled')\n  // }\n\n\n  // const toggleImportanceOf = id => {\n  //   const url = `http://localhost:3001/notes/${id}`\n  //   const note = notes.find(n => n.id === id)\n  //   const changedNote = { ...note, important: !note.important }\n\n  //   axios.put(url, changedNote).then(response => {\n  //     setNotes(notes.map(note => note.id !== id ? note : response.data))\n  //   })\n  // }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App ","  // import React, { useState } from 'react'\n  // import ReactDOM from 'react-dom'\n\n/*const Hello = ({ name, age }) => {\n  const bornYear = () => new Date().getFullYear() - age\n\n  return (\n    <div>\n      <p>\n        Hello {name}, you are {age} years old\n      </p>\n      <p>So you were probably born in {bornYear()}</p>\n    </div>\n  )\n}\n\nconst App = () => {\n  const name = 'Peter'\n  const age = 10\n\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello name=\"Maya\" age={26 + 10} />\n      <Hello name={name} age={age} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))*/\n\n// const Display = ({ counter }) => <div>{counter}</div>\n\n// const Button = ({ handleClick, text }) => (\n//   <button onClick={handleClick}>\n//     {text}\n//   </button>\n// )\n\n// const App = () => {\n//   const [counter, setCounter] = useState(0)\n\n//   const increaseByOne = () => setCounter(counter + 1)\n//   const decreaseByOne = () => setCounter(counter - 1)\n//   const setToZero = () => setCounter(0)\n\n//   return (\n//     <div>\n//       <Display counter={counter} />\n//       <Button\n//         handleClick={increaseByOne}\n//         text='plus'\n//       />\n//       <Button\n//         handleClick={setToZero}\n//         text='zero'\n//       />\n//       <Button\n//         handleClick={decreaseByOne}\n//         text='minus'\n//       />\n//     </div>\n//   )\n// }\n\n\n\n// const History = (props) => {\n//   if (props.allClicks.length === 0) {\n//     return (\n//       <div>\n//         the app is used by pressing the buttons\n//       </div>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       button press history: {props.allClicks.join(' ')}\n//     </div>\n//   )\n// }\n\n// const Button = (props) => {\n//   console.log(props)\n//   const { onClick, text } = props\n//   return (\n//     <button onClick={onClick}>\n//       {text}\n//     </button>\n//   )\n// }\n\n// const App = (props) => {\n//   const [left, setLeft] = useState(0)\n//   const [right, setRight] = useState(0)\n//   const [allClicks, setAll] = useState([])\n\n//   const handleLeftClick = () => {\n//     setAll(allClicks.concat('L'))\n//     setLeft(left + 1)\n//   }\n\n//   const handleRightClick = () => {\n//     setAll(allClicks.concat('R'))\n//     setRight(right + 1)\n//   }\n\n//   return (\n//     <div>\n//       <div>\n//         {left}\n//         <Button onClick={handleLeftClick} text='left' />\n//         <Button onClick={handleRightClick} text='right' />\n//         {right}\n//         <History allClicks={allClicks} />\n//       </div>\n//     </div>\n//   )\n// }\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )\n\n\n/*const App = (props) => {\n  const [value, setValue] = useState(10)\n\n  const handleClick = () => {\n    console.log('clicked the button')\n    setValue(0)\n  }\n\n  return (\n    <div>\n      {value}\n      <button onClick={handleClick}>button</button>\n    </div>\n  )\n}*/\n\n// const Display = props => <div>{props.value}</div>\n\n// const Button = (props) => (\n//   <button onClick={props.handleClick}>\n//     {props.text}\n//   </button>\n// )\n\n// const App = props => {\n//   const [value, setValue] = useState(10)\n\n//   const setToValue = newValue => {\n//     setValue(newValue)\n//   }\n\n//   return (\n//     <div>\n//       <Display value={value} />\n//       <Button handleClick={() => setToValue(1000)} text=\"thousand\" />\n//       <Button handleClick={() => setToValue(0)} text=\"reset\" />\n//       <Button handleClick={() => setToValue(value + 1)} text=\"increment\" />\n//     </div>\n//   )\n// }\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n"],"sourceRoot":""}